# http://ja.wikipedia.org/wiki/Ruby のソース。2014/8/29に取得。
{{otheruses|プログラミング言語|「ルビー」・「ルビ」の他の使い方|ルビー (曖昧さ回避)}}
{{Infobox プログラミング言語
|名前=Ruby
|ロゴ=[[ファイル:Ruby-logo-notext.png|Rubyロゴ]]
|パラダイム=[[構造化プログラミング|構造化]]、[[命令型プログラミング|命令型]]、[[オブジェクト指向プログラミング|オブジェクト指向]]
|登場時期=[[1995年]]
|設計者= [[まつもとゆきひろ]]
|最新リリース= 2.1.2 / {{release date|2014|05|09}}
|型付け=強い[[動的型付け]], [[ダック・タイピング]]
|処理系=Ruby MRI, [[YARV]], [[JRuby]], [[IronRuby]], MacRuby
|影響を受けた言語=[[Smalltalk]], [[LISP]], [[Perl]], [[Python]], [[CLU]]
|影響を与えた言語=[[D言語]]、<ref>[http://www.digitalmars.com/d/1.0/ Intro - D Programming Language 1.0 - Digital Mars]</ref>[[Groovy]]
|プラットフォーム=[[クロスプラットフォーム]]
|ライセンス=[[BSDライセンス]]、[[Rubyライセンス|Rubyライセンス]]の[[デュアルライセンス|デュアル]]<ref>{{cite mailing list
|url = http://blade.nagaokaut.ac.jp/cgi-bin/scat.rb/ruby/ruby-dev/42294|title=Ruby'sライセンスの、BSDLとのデュアルライセンスへの変更|date=2010-09-24|accessdate=2011-04-20|mailinglist=ruby-dev|authorlink=まつもとゆきひろ|language=[[日本語]]}}</ref><br />（1.9.2までは[[GNU General Public License|GPL]]とRubyのデュアル）
|ウェブサイト=[http://www.ruby-lang.org/ www.ruby-lang.org]
}}
{{プログラミング言語}}

'''Ruby'''（ルビー）は、[[まつもとゆきひろ]]（通称 Matz）により開発された[[オブジェクト指向]][[スクリプト言語]]であり、スクリプト言語が用いられてきた領域でのオブジェクト指向プログラミングを実現する。
また日本で開発されたプログラミング言語としては始めて[[国際電気標準会議]]で国際規格に認証された事例となった<ref name="ipa20120402">{{Cite press release |title=プログラム言語Ruby、国際規格として承認 |url=https://www.ipa.go.jp/about/press/20120402_2.html |publisher=独立行政法人情報処理推進機構 |date=2012-04-02}}</ref>。

==概要==
Ruby は当初[[1993年]][[2月24日]]に生まれ、[[1995年]]12月に[[Fj (ニュースグループ)|fj]]上で発表された。名称の Ruby は、プログラミング言語 [[Perl]] が6月の[[誕生石]]である Pearl（[[真珠]]）と同じ発音をすることから、まつもとの同僚の誕生石（7月）の[[ルビー]]を取って名付けられた。

機能として、[[クラス (コンピュータ)|クラス定義]]、[[ガベージコレクション]]、強力な[[正規表現]]処理、[[マルチスレッド]]、[[例外処理]]、[[イテレータ]]、[[クロージャ]]、[[Mixin]]、[[多重定義|演算子オーバーロード]]などがある。Perl を代替可能であることが初期の段階から重視されている。Perlと同様に[[グルー言語]]としての使い方が可能で、[[C言語]]プログラムやライブラリを呼び出す[[拡張モジュール]]を組み込むことができる。

Ruby 処理系は、主に[[インタプリタ]]として実装されている（詳しくは[[#実装]]を参照）。

[[可読性]]を重視した構文となっている。Ruby においては整数や文字列なども含めデータ型はすべてがオブジェクトであり、純粋なオブジェクト指向言語といえる。

長らく言語仕様が明文化されず、まつもとによる実装が言語仕様に準ずるものとして扱われて来たが、2010年6月現在、[[JRuby]] や Rubinius といった互換実装の作者を中心に機械実行可能な形で明文化する RubySpec という試みが行われている。公的規格としては2011年3月22日にJIS規格（JIS X 3017）が制定され、その後2012年4月1日に日本発のプログラム言語では初めてISO/IEC規格（ISO/IEC 30170）として承認された
<ref name="ipa20120402" />。

[[フリーソフトウェア]]として Ruby ライセンス（Ruby License や Ruby'sと表記されることもある。[[GNU General Public License|GPL]]か[[アーティスティック・ライセンス|Artistic]]に似た[[Rubyライセンス|独自ライセンス]]を選択する[[デュアルライセンス]]。）で配布されている。
<!--Ruby Licenseがデュアルライセンス全体を指すことは
http://www.rubyist.net/~matz/20030607.html#p07
を根拠としている。
-->

==設計思想==
開発者のまつもとゆきひろは、「Rubyの言語仕様策定において最も重視しているのはストレスなく[[プログラミング (コンピュータ)|プログラミング]]を楽しむことである (''enjoy programming'')」と述べている。（ただし、まつもとによる明文化された言語仕様は存在しない。）Perlのモットー「やり方はいろいろある (''There's More Than One Way To Do It; TMTOWTDI'')」は「多様性は善 (''Diversity is Good'')」というスローガンで Ruby に引き継がれてはいるものの最重要なものではないとも述べており、非推奨な手法も可能にするとともに、そのような手法を言語仕様により使いにくくすることによって自粛を促している。これは言語仕様が「望ましい」習慣の押し付けを行うということであり、洗脳言語（Babel-17）と言われる一面でもある。<!--かつてはRubyの言語仕様を「[[驚き最小の原則|驚き最小化原則]]」— プログラマの予測に反するような例外的な振る舞いや、言語仕様上のトリッキーな部分をなるべく排除すること — と表現していたが、拡大解釈されがちなので今ではスローガンから外されている。-->

==実装==
===公式な実装===
Rubyの公式な実装には、以下の二種類が存在する。

;MRI（Matz' Ruby Implementation）
:1.8.x以前の公式実装。まつもとゆきひろによって開発されはじめたC言語による実装であり、最も広く使われている。JRuby などに対して CRuby と呼ばれることもある。また、JRuby などに対しては、広義の意味で後述の YARV を取り込んだ 1.9.x も含んで MRI と言うこともある。
;[[YARV]]
:1.9で採用された、MRIを拡張した公式な処理系。これはソースコードをバイトコードへコンパイルした後、バイトコードを[[仮想機械]]上で実行するインタプリタである。もともとは開発中におけるその仮想機械の名前。

===その他の実装===
;[[JRuby]]
:[[Java]] 言語による実装。純粋な Java で行われているため、プラットフォーム非依存の利用が可能。ほとんどの Ruby クラスが組み込みで提供されている。インタープリタ・[[実行時コンパイラ]]・[[事前コンパイラ]]の3種類が用意されている。事前コンパイラでは、Java バイトコードへ変換し、JRuby が無くても他の Java プラットフォーム上で動作させることが可能となる。
;[[IronRuby]]
:[[.NET Framework]] 上で Ruby を動作させる実装であり、.NET Framework のライブラリと連携させることができる。[[ジャストインタイムコンパイル方式|JIT方式]]のバイトコードインタプリタ。[[共通言語基盤]]に準拠した実装（[[Mono (ソフトウェア)|Mono]]など）で動作するため、プラットフォーム非依存の利用も可能（ただし、ソースコードが .NET Framework のライブラリに依存している場合は Mono での動作は不可能）。
;[[MacRuby]]
:[[OS X|Mac OS X]] 上で動作する Ruby 実装。[[Cocoa]] を含む様々なフレームワークとの連携が可能。[[RubyCocoa]] の問題点を解決するために開発されている。
;[[Rubinius]]
:[[仮想機械]]上で Ruby を実行する[[ジャストインタイムコンパイル方式|JIT方式]]のバイトコードインタプリタ。大部分が Ruby で実装されている。
;[[MagLev]]
:[[smalltalk]]仮想マシン上で動作する実装[http://maglev.github.io/]。
;[[mruby]]
:[[組み込みシステム]]向けの軽量版。[[家電製品|家電製品]]の他、[[スマートフォン]]、[[コンピュータゲーム|ゲーム]]などでの使用を想定している。
;その他
:[[Parrot]] 上で Ruby を動作させるための実装なども開発されている。

==競合言語==

{{出典の明記|section=1|date=2013年2月}}

[[プログラミング言語]]としての Ruby は、オブジェクト指向の[[動的型付け]]言語の[[インタプリタ]]言語として人気のある言語のひとつであり、多くの分野で Perl や [[Python]] と競合する。特に Python とは共通する点が多く、このことがそれぞれの言語のユーザ同士の間で「どちらの言語が優れているか」といった論争を生んできた。しかしその論争は技術的な細部にとらわれた不毛な議論になることも多かった。

ここであえて両者の細部を比較はしないが、ユーザ数や書かれたシステムの数量・質、同等な機能を持つプログラムの実行速度などを現時点で比べると世界的には Python の方が人気が高い。一方、日本では開発者が日本人であることもあり、Ruby の人気は高く書籍も多く出版されている。とはいえ2004年前後まで圧倒的な[[キラーアプリ]]がなく、[[tDiary]] や[[バグトラッキングシステム]]「[[影舞]]」程度しか知られていなかったため、大きな普及には至らなかった。ところが2004年末に発表され2005年に一躍脚光を浴びた [[Ruby on Rails]] により注目を集め始めた。

==例==
基本的なコード
<source lang="ruby">
# 文字列、数値を含め、全てがオブジェクトである
-199.abs                                       # 199
"ruby is cool".length                          # 12
"Rick".index("c")                              # 2
"Nice Day Isn't It?".split(//).uniq.sort.join  # " '?DINaceinsty"
</source>

===コレクション===
[[配列]]の作成と使用法
<source lang="ruby">
a = [1, 'hi', 3.14, 1, 2, [4, 5]]

a[2]                      # 3.14
a.reverse                 # [[4, 5], 2, 1, 3.14, 'hi', 1]
a.flatten.uniq            # [1, 'hi', 3.14, 2, 4, 5]
</source>

[[ハッシュテーブル|ハッシュ]]の作成と使用法
<source lang="ruby">
hash = {'water' => 'wet', 'fire' => 'hot'}
hash = {water: 'wet', fire: 'hot'} # シンボルリテラルをキーとする場合、Ruby 1.9 からはこのような Javascript 風の表記ができる。
puts hash['fire']       # 表示:  hot

hash.each do |key, value|
  puts "#{key} is #{value}"
end

# 表示:               water is wet
#                     fire is hot

hash.delete_if {|key, value| key == 'water'}   # Deletes 'water' => 'wet'
</source>

===制御構造===
ほかの言語でもよくみられるような制御構造を用いることができる。

<source lang="ruby">
if "fablic".length > 3
  puts 'ya'
else
  puts 'nop'
end
# 表示:         ya

list = [1, 2, 5, 13, 21]
for item in list
  puts item
end
# 表示:         1
#               2
#               5
#               13
#               21

n = 0
while n < 3
  puts 'foobar'
  n += 1
end
# 表示:         foobar
#               foobar
#               foobar
</source>

一部の制御構造は後述するイテレータで代替することができる。

===ブロック付きメソッド呼び出し===
Ruby ではブロック付きメソッド呼び出しを用いるコードが好まれることが多い。これを用いると、ユーザー定義の[[制御構造]]や[[コールバック (情報工学)|コールバック]]など様々な処理を簡潔に記述できるからである。

ブロックとは波括弧（{、}）または <code>do</code>、<code>end</code> によって囲まれたコード列のことである。メソッド呼び出しの末尾に記述することが出来る。
<source lang="ruby">
# { ... }
method1 { puts "Hello, World!" }
# do ... end
method2 do
  puts "Hello, world!"
end
</source>

ブロック付きメソッド呼び出しが繰り返し処理を主な役割としていたことから、イテレータと呼ばれていた時期がある。しかし、実際には繰り返し処理にとどまらず、様々な使われ方をしているので、最近はブロック付きメソッド呼び出し全体の総称としてイテレータという名称を用いるのは適切でないと考えられている。<ref>http://blade.nagaokaut.ac.jp/cgi-bin/scat.rb/ruby/ruby-list/39878</ref>

====繰り返し処理====
配列の各要素への繰り返し処理
<source lang="ruby">
list = [1, 2, 5, 13, 21]
list.map! {|item| item * 2} # listの各要素を2倍する処理
</source>

以下はブロックを使わずに同じことを行う場合
<source lang="ruby">
list = [1, 2, 5, 13, 21]
n = 0
while n < list.length
  list[n] *= 2
  n += 1
end
</source>

指定した回数の繰り返し処理

<source lang="ruby">
3.times { puts 'foobar' }       # 制御構造の項のwhileの例と同じ
</source>

====後処理の省力化====

ブロックの内容を実行してから、決められた後処理を行うメソッドもある

<source lang="ruby">
File.open('file.txt', 'w+b') do |file|
  file.puts 'Wrote some text.'
end                             # Fileはここで自動的にcloseされる
</source>

これは次の例と同様の処理を行う（<code>ensure</code> については例外処理の項を参照）
<source lang="ruby">
begin
  file = File.open('file.txt', 'w+b')
  file.puts 'Wrote some text.'
ensure
  file.close
end
</source>

====本処理を後から指定====
実際に行いたい処理をブロックで記述する。前項の後処理の省力化もこれの一例といえる。

<source lang="ruby">
def bfs(list)       #配列をツリーに見立てた処理
  until list.empty?
    unit = list.shift
    yield unit      #ブロックの内容を実行
    unit.each{|v| list.push v} if defined? unit.push
  end
end
bfs([0,1,[2,3],4,[5,[6,7,8]],9]) {|v| p v}
</source>

この例は、ツリーから要素と分枝をつぎつぎと取り出して取り出したものになんらかの処理を行うものである。メソッドの利用者は、なんらかの処理のみを記述すればよく、取り出しのアルゴリズムなど、本質的でない内容に意識を向ける必要がなくなる。

====クロージャ====
[[クロージャ]]となるようなブロックの引数渡し
<source lang="ruby">
# オブジェクトのインスタンス変数（変数名の頭に@が付く）でブロックを記憶。
def remember(&p)
  @block = p
end
# nameを受け取るブロックを引数に、上記のメソッドを呼び出す。
remember {|name| puts "Hello, " + name + "!"}

# 後に必要になった時点でクロージャを呼び出す。
@block.call("John")
# 表示:"Hello, John!"
</source>

メソッドからクロージャを返す例
<source lang="ruby">
def create_set_and_get(value = 0)
  return proc {|x| value = x}, proc { value }
end

setter, getter = create_set_and_get
setter.call(21)
getter.call # => 21
</source>

===クラス===
次のコードは<code>Person</code>という名前のクラスである。その中、まず<code>initialize</code>はオブジェクトを初期化するコンストラクタである。ほかに2つのメソッドがあり、1つは比較演算子である<code>&lt;=&gt;</code>を[[オーバーライド]]しており<code>Array#sort</code>によりプロパティ<code>age</code>でソートすることができる。もう1つのオーバーライド箇所の<code>to_s</code>メソッドは <code>Kernel#puts</code> での表示の形式を整える。<code>attr_reader</code>は Ruby における[[メタプログラミング]]の例であり、<code>attr</code> はインスタンス変数の入出力を司る、いわゆる値を取得する <code>getter</code> メソッドや値を設定する <code>setter</code> メソッド（[[アクセサ]]）を定義する。<code>attr_reader</code>は <code>getter</code> メソッドのみの定義である。なおメソッド中では最後に評価された式が返り値となり、明示的な<code>return</code>は省略できる。

<source lang="ruby">
class Person
  def initialize(name, age)
    @name, @age = name, age
  end

  def <=>(person)
    @age <=> person.age
  end

  def to_s
    "#{@name} (#{@age})"
  end

  attr_reader :name, :age
end

group = [ Person.new("John", 20),
          Person.new("Markus", 63),
          Person.new("Ash", 16)
        ]

puts group.sort.reverse
</source>

結果は3つの名前が年の大きい順に表示される
 Markus (63)
 John (20)
 Ash (16)

===例外処理===
例外はなにか不具合が起こったとき<code>raise</code>の呼び出しで発生させることができる。Ruby での例外は <code>Exception</code> クラスか、そのサブクラスのインスタンスである。

例外にはメッセージを追加することもできる
<source lang="ruby">
 raise "This is a message"
</source>

さらに例外のタイプも指定できる
<source lang="ruby">
 raise ArgumentError, "Illegal arguments!"
</source>

例外は<code>rescue</code>節で処理することができ、次のようにコードに<code>rescue</code>を付加するだけである
<source lang="ruby">
begin
  # 通常処理
rescue
  # 例外処理。引数を省略すると、StandardErrorのサブクラスの例外のみ処理する
rescue SomeError
  # 例外処理。SomeErrorの例外のみ処理する。
ensure
  # 例外の発生に関わらず必ず実行される処理
else
  # 例外が発生しなかったときに実行される処理
end
</source>

==Rubyの周辺技術==
*[[分散オブジェクト]]を実現する [[dRuby]]
*Ruby スクリプトに埋め込むことができる文書形式[[Ruby Document format|RD]]
*Ruby によるRDを採用した[[ウィキ]]、[[RWiki]]
*Ruby から[[SDL]]ライブラリを扱えるようにする[[Ruby/SDL]]
*Ruby から [[Delphi]] を扱えるようにする [[Apollo]]
*Ruby によるウェブアプリケーションフレームワーク [[Ruby on Rails]]
*Ruby の別の処理系である [[YARV]]
*Ruby の統合開発環境 RDE
*Ruby のコードを Windows の[[実行ファイル|実行形式ファイル]]に変換する [[Exerb]]
*Ruby 用のライブラリ管理システムである [[RubyGems]]
*[[Apache HTTP Server]] に組み込むための [[mod ruby]]
*サーバサイドで[[HyperText Markup Language|HTML]]への埋め込み Ruby 文を実現する [[eRuby]]
*[[Microsoft Windows]] の [[ActiveX]] 環境で Ruby インタープリターを呼び出す [[ActiveScriptRuby]]（[[Internet Explorer]] 限定だがHTMLに埋めこんでクライアント上で動かすスクリプト言語として Rubyを指定できるようになる）
*Ruby から [[Windows API|Win32API]] や[[Component Object Model|COMコンポーネント]]を呼び出すためのライブラリー WIN32OLE
*JavaScript や Flash 上で動く Ruby の処理系 [[HotRuby]]
*Ruby による[[ビヘイビア駆動開発]]のためのフレームワーク [[RSpec]]
*Ruby で書かれた[[ビルドツール]] [[Rake]]

==Ruby で開発されたアプリケーション ==
*[[tDiary]]
*[[影舞]]
*[[Hiki]]
*[[Chef]]
*[[Vagrant]]
*[[Ruby on Rails]]
**[[GitHub]]
**[[Metasploit]]
**[[Redmine]]
**[[Basecamp]]
**[[RadiantCMS]]
*[[qwikWeb]]
*[[WEBrick]]
*[[Mongrel]]
*[[Phusion Passenger]]
*[[Puppet (ソフトウェア)|Puppet]]

==Rubyを組み込んだアプリケーション==
;RPGツクールXP・RPGツクールVX
:株式会社エンターブレインから発売されているRPG制作ソフトシリーズのうち、[[RPGツクールXP]]と[[RPGツクールVX]]では、Ruby をツクール専用にカスタマイズした [[RGSS]]を搭載している。同シリーズの従来ソフトではあらかじめ用意された機能しか使えなかったが、RGSSにより戦闘などのシステムを一から構築する事が出来るようになった。

==エピソード==
Ruby ではブロック構造を <code>end</code> で終える構文が採用されているが、開発者のまつもとゆきひろは他の構文が採用される可能性があったことを述べている。当時、[[Emacs]] 上で <code>end</code> で終える構文をオートインデントさせた例はあまりなく、Ruby 言語用の編集モードにオートインデント機能を持たせられるかどうかが問題になっていたためである<ref group="注釈">まつもとゆきひろは1988年に Emacs に触れて以来、Emacsを使い続けている。（{{cite book|和書|title=Emacs実践入門 思考を直感的にコード化し、開発を加速する|author=大竹智也|isbn=978-4-7741-5002-4|publisher=技術評論社|date=2012-04-05|edition=初版第1刷|pages=iiiからivページ|chapter=本書に寄せて}}、まつもとによる記述より）</ref>。実際には数日の試行でオートインデント可能であることがわかり、現在の構文になった。[[C言語]]のような<code>{～}</code>を使った構文も検討されていたが、結局これは採用されなかった<ref>まつもとゆきひろ 「探訪 Ruby 第6回」『Linux Magazine』56号、[[株式会社アスキー]]、2004年。</ref>。

==参考文献==
*{{Cite book|和書|author=高橋征義|authorlink=高橋征義|coauthors=[[後藤裕蔵]]|others=[[まつもとゆきひろ]]監修|year=2002|month=4|title=たのしい Ruby　Rubyではじめる気軽なプログラミング|publisher=[[ソフトバンクパブリッシング]]|isbn=4-7973-1408-7|ref=harv}} - プログラム未経験者向けの入門書。
**{{Cite book|和書|author=高橋征義|authorlink=高橋征義|coauthors=[[後藤裕蔵]]|others=[[まつもとゆきひろ]]監修|year=2006|month=8|title=たのしいRuby　Rubyではじめる気軽なプログラミング|edition=第2版|publisher=[[ソフトバンクパブリッシング]]|isbn=4-7973-3661-7|ref=harv}}
**{{Cite book|和書|author=高橋征義|authorlink=高橋征義|coauthors=[[後藤裕蔵]]|others=[[まつもとゆきひろ]]監修|year=2010|month=3|title=たのしい Ruby|edition=第3版|publisher=[[ソフトバンクパブリッシング]]|isbn=978-4-7973-5740-0|ref=harv}}
*{{Cite book|和書|author=デビット・トーマス|authorlink=デビット・トーマス|coauthors=[[アンドリュー・ハント]]|others=[[田和勝]]訳、[[まつもとゆきひろ]]監修|year=2001|month=9|title=プログラミングRuby　達人プログラマーガイド|publisher=[[ピアソン・エデュケーション]]|isbn=4-89471-453-1|ref=harv}}
**{{Cite book|和書|author=Dave Thomas|authorlink=デビット・トーマス|coauthors=[[チャッド・フォウラー|Chad Fowler]]・[[アンドリュー・ハント|Andy Hunt]]|others=[[田和勝]]訳、[[まつもとゆきひろ]]監修|year=2006|month=8|title=プログラミング Ruby 言語編|edition=第2版|publisher=[[オーム社]]|isbn=4-274-06642-8|url=http://ssl.ohmsha.co.jp/cgi-bin/menu.cgi?ISBN=4-274-06642-8|ref=harv}}
**{{Cite book|和書|author=Dave Thomas|authorlink=デビット・トーマス|coauthors=[[チャッド・フォウラー|Chad Fowler]]・[[アンドリュー・ハント|Andy Hunt]]|others=[[田和勝]]訳、[[まつもとゆきひろ]]監修|year=2006|month=8|title=プログラミング Ruby ライブラリ編|edition=第2版|publisher=[[オーム社]]|isbn=4-274-06643-6|url=http://ssl.ohmsha.co.jp/cgi-bin/menu.cgi?ISBN=4-274-06643-6|ref=harv}}
**{{Cite book|和書|author=Dave Thomas|authorlink=デビット・トーマス|coauthors=[[チャッド・フォウラー|Chad Fowler]]・[[アンドリュー・ハント|Andy Hunt]]|others=[[田和勝]]訳、[[まつもとゆきひろ]]監修|year=2010|month=5|title=プログラミング Ruby 1.9　言語編|publisher=[[オーム社]]|isbn=978-4-274-06809-6|url=http://ssl.ohmsha.co.jp/cgi-bin/menu.cgi?ISBN=978-4-274-06809-6|ref=harv}}
**{{Cite book|和書|author=Dave Thomas|authorlink=デビット・トーマス|coauthors=[[チャッド・フォウラー|Chad Fowler]]・[[アンドリュー・ハント|Andy Hunt]]|others=[[田和勝]]訳、[[まつもとゆきひろ]]監修|year=2010|month=5|title=プログラミング Ruby 1.9　ライブラリ編|publisher=[[オーム社]]|isbn=978-4-274-06810-2|url=http://ssl.ohmsha.co.jp/cgi-bin/menu.cgi?ISBN=978-4-274-06810-2|ref=harv}}
*{{Cite book|和書|author=David Flanagan|authorlink=デビッド・フラナガン|coauthors=[[まつもとゆきひろ]]|others=[[卜部昌平]]監訳、[[長尾高弘]]訳|year=2009|month=1|title=プログラミング言語 Ruby|publisher=[[オライリー・ジャパン]]|isbn=978-4-87311-394-4|url=http://www.oreilly.co.jp/books/9784873113944/|ref=harv}}
*{{Cite book|和書|author=まつもとゆきひろ|authorlink=まつもとゆきひろ|coauthors=[[石塚圭樹]]|year=1999|month=11|title=オブジェクト指向スクリプト言語 Ruby|series=ASCII software science : Language 11|publisher=[[アスキー (企業)|アスキー]]|isbn=4-7561-3254-5}}
*{{Cite book|和書|author=まつもとゆきひろ|authorlink=まつもとゆきひろ|others=[[日経Linux]]編集|year=2009|month=5|title=まつもとゆきひろ　コードの世界～スーパー・プログラマになる14の思考法|publisher=[[日経BP社]]|isbn=978-4-8222-3431-7|ref=harv}}

==脚注==
{{脚注ヘルプ}}
<references />
<references group="注釈"/>

== 関連項目 ==
{{Portal|FLOSS|[[ファイル:FLOSS_logo.png|41px]]}}
{{Commonscat|Ruby programming language}}
{{Wikibooks}}
*[[Perl]]
*[[Python]]
*[[スクリプト言語]]
*[[オブジェクト指向プログラミング]]

== 外部リンク ==
*[http://www.ruby-lang.org/ Ruby公式ウェブサイト]
*[http://www.ruby.or.jp/ Rubyアソシエーション]
*[http://www.jisc.go.jp/app/pager?%23jps.JPSH0090D:JPSO0020:/JPS/JPSO0090.jsp=&RKKNP_vJISJISNO=X3017 JISC - JISX3017 プログラム言語Ruby]

{{Ruby programming language}}
{{FOSS}}

{{DEFAULTSORT:RUBY}}
[[Category:オブジェクト指向言語]]
[[Category:オープンソース]]
[[Category:スクリプト言語]]
[[Category:Ruby|*]]
{{Link GA|ru}}
